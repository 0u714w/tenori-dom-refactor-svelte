import __SNOWPACK_ENV__ from '../__snowpack__/env.js';
import.meta.env = __SNOWPACK_ENV__;

import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import Memory from "./Memory.js";
import NoteGrid from "./NoteGrid.js";
import StartStop from "./StartStop.js";
import Controls from "./Controls.js";
import { initClient } from "../web_modules/@urql/svelte.js";
import ToneGenerator from "./ToneGenerator.js";
import generateImpulseResponse from "./ImpulseResponse.js";

function create_fragment(ctx) {
	let div;
	let memory;
	let t0;
	let startstop;
	let t1;
	let notegrid;
	let t2;
	let controls;
	let t3;
	let button;
	let current;
	let mounted;
	let dispose;
	memory = new Memory({});
	startstop = new StartStop({});
	notegrid = new NoteGrid({});
	controls = new Controls({});

	return {
		c() {
			div = element("div");
			create_component(memory.$$.fragment);
			t0 = space();
			create_component(startstop.$$.fragment);
			t1 = space();
			create_component(notegrid.$$.fragment);
			t2 = space();
			create_component(controls.$$.fragment);
			t3 = space();
			button = element("button");
			button.textContent = "Play Tone with Reverb";
			attr(div, "class", "App svelte-bytw94");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(memory, div, null);
			append(div, t0);
			mount_component(startstop, div, null);
			append(div, t1);
			mount_component(notegrid, div, null);
			append(div, t2);
			mount_component(controls, div, null);
			append(div, t3);
			append(div, button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*playTone*/ ctx[0]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(memory.$$.fragment, local);
			transition_in(startstop.$$.fragment, local);
			transition_in(notegrid.$$.fragment, local);
			transition_in(controls.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(memory.$$.fragment, local);
			transition_out(startstop.$$.fragment, local);
			transition_out(notegrid.$$.fragment, local);
			transition_out(controls.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(memory);
			destroy_component(startstop);
			destroy_component(notegrid);
			destroy_component(controls);
			mounted = false;
			dispose();
		}
	};
}

let frequency = 440; // Example frequency
let wave = 0; // Index for 'triangle' wave
let octave = 1; // Example octave
let release = 1; // Example release time
let volume = 0.5; // Example volume

function instance($$self) {
	const dev = import.meta.env.NODE_ENV === "development";

	const url = dev
	? "http://localhost:3000"
	: "https://tenori-api.herokuapp.com/";

	initClient({ url });

	async function playTone() {
		const reverbFile = await generateImpulseResponse();

		await ToneGenerator({
			frequency,
			wave,
			octave,
			release,
			volume,
			reverbInput: reverbFile
		});
	}

	return [playTone];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;