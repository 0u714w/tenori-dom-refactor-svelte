import './StartStop.css.proxy.js';
/* src/StartStop.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class
} from "../web_modules/svelte/internal.js";

import {
	timerIntervals,
	tenoriState,
	nameState,
	tempo,
	currentStep,
	now
} from "./stores.js";

function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.innerHTML = `<i class="fas fa-play"></i>`;
			attr(button, "class", "svelte-9b48nj");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*play*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (68:4) {#if $tenoriState.play}
function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.innerHTML = `<i class="fas fa-pause"></i>`;
			attr(button, "class", "svelte-9b48nj");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*play*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div0;
	let h1;
	let t1;
	let small;
	let t2;
	let t3;
	let div1;
	let span;
	let t4;
	let t5;
	let t6;
	let button;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*$tenoriState*/ ctx[0].play) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			section = element("section");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "TENORI DOM";
			t1 = space();
			small = element("small");
			t2 = text(/*$nameState*/ ctx[1]);
			t3 = space();
			div1 = element("div");
			span = element("span");
			t4 = text(/*$currentStep*/ ctx[2]);
			t5 = space();
			if_block.c();
			t6 = space();
			button = element("button");
			button.innerHTML = `<i class="fas fa-stop"></i>`;
			attr(small, "class", "svelte-9b48nj");
			toggle_class(small, "showName", /*$nameState*/ ctx[1].length);
			attr(div0, "class", "svelte-9b48nj");
			attr(span, "class", "svelte-9b48nj");
			attr(button, "class", "svelte-9b48nj");
			attr(div1, "class", "svelte-9b48nj");
			attr(section, "class", "svelte-9b48nj");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			append(div0, h1);
			append(div0, t1);
			append(div0, small);
			append(small, t2);
			append(section, t3);
			append(section, div1);
			append(div1, span);
			append(span, t4);
			append(div1, t5);
			if_block.m(div1, null);
			append(div1, t6);
			append(div1, button);

			if (!mounted) {
				dispose = listen(button, "click", /*stop*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$nameState*/ 2) set_data(t2, /*$nameState*/ ctx[1]);

			if (dirty & /*$nameState*/ 2) {
				toggle_class(small, "showName", /*$nameState*/ ctx[1].length);
			}

			if (dirty & /*$currentStep*/ 4) set_data(t4, /*$currentStep*/ ctx[2]);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div1, t6);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $tempo;
	let $tenoriState;
	let $now;
	let $nameState;
	let $currentStep;
	component_subscribe($$self, tempo, $$value => $$invalidate(5, $tempo = $$value));
	component_subscribe($$self, tenoriState, $$value => $$invalidate(0, $tenoriState = $$value));
	component_subscribe($$self, now, $$value => $$invalidate(6, $now = $$value));
	component_subscribe($$self, nameState, $$value => $$invalidate(1, $nameState = $$value));
	component_subscribe($$self, currentStep, $$value => $$invalidate(2, $currentStep = $$value));

	const play = () => {
		return tenoriState.update(store => {
			const updatedStore = { ...store };
			updatedStore.play = !updatedStore.play;

			if (updatedStore.play) {
				timerIntervals.update(timers => {
					const interval = setInterval(
						() => {
							now.update(() => new Date().getTime());
							currentStep.update(step => step = step === 16 ? step -= 15 : step += 1);
						},
						$tempo
					);

					timers.push(interval);
					return timers;
				});
			} else {
				timerIntervals.update(timers => {
					timers.map(x => clearInterval(x));
					return [];
				});
			}

			return updatedStore;
		});
	};

	tempo.subscribe(tempo => {
		const { play } = $tenoriState;

		if (play) {
			setTimeout(
				() => {
					timerIntervals.update(timers => {
						const interval = setInterval(
							() => {
								now.update(() => new Date().getTime());
								currentStep.update(step => step = step === 16 ? step -= 15 : step += 1);
							},
							tempo
						);

						timers.push(interval);
						return timers.map((x, i, a) => i !== a.length - 1 ? clearInterval(x) : x);
					});
				},
				tempo - (new Date().getTime() - $now)
			);

			now.update(() => new Date().getTime());
		}
	});

	const stop = () => {
		timerIntervals.update(timers => {
			timers.map((x, i) => clearInterval(x));
			return [];
		});

		tenoriState.update(store => {
			const updatedStore = { ...store };
			updatedStore.play = false;
			return updatedStore;
		});

		currentStep.update(step => {
			step = 1;
			return step;
		});
	};

	return [$tenoriState, $nameState, $currentStep, play, stop];
}

class StartStop extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default StartStop;