import './GetSetting.css.proxy.js';
/* src/GetSetting.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { query, operationStore } from "../web_modules/@urql/svelte.js";
import { nameState, tenoriState } from "./stores.js";
import Modal from "./Modal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i][1];
	return child_ctx;
}

// (79:4) {#each Object.entries(errors) as [, error]}
function create_each_block(ctx) {
	let span;
	let t_value = /*error*/ ctx[12] + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "svelte-vn88ew");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*errors*/ 4 && t_value !== (t_value = /*error*/ ctx[12] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (68:0) <Modal bind:open loading={$getSettingQuery.fetching}>
function create_default_slot(ctx) {
	let form;
	let label;
	let t1;
	let input;
	let focus_action;
	let t2;
	let button;
	let i;
	let button_disabled_value;
	let t3;
	let div;
	let mounted;
	let dispose;
	let each_value = Object.entries(/*errors*/ ctx[2]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			form = element("form");
			label = element("label");
			label.textContent = "ID";
			t1 = space();
			input = element("input");
			t2 = space();
			button = element("button");
			i = element("i");
			t3 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(label, "for", "id-num");
			attr(input, "type", "text");
			attr(input, "id", "id-num");
			attr(input, "placeholder", "Setting ID");
			attr(input, "class", "svelte-vn88ew");
			attr(i, "class", "fas fa-paper-plane");
			button.disabled = button_disabled_value = !/*id*/ ctx[1].length;
			attr(button, "type", "submit");
			attr(button, "class", "svelte-vn88ew");
			attr(form, "class", "get-setting-form svelte-vn88ew");
			attr(div, "class", "errors svelte-vn88ew");
		},
		m(target, anchor) {
			insert(target, form, anchor);
			append(form, label);
			append(form, t1);
			append(form, input);
			set_input_value(input, /*id*/ ctx[1]);
			append(form, t2);
			append(form, button);
			append(button, i);
			insert(target, t3, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[8]),
					action_destroyer(focus_action = focus.call(null, input)),
					listen(form, "submit", prevent_default(/*getSetting*/ ctx[5])),
					listen(form, "keydown", /*keydown_handler*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*id*/ 2 && input.value !== /*id*/ ctx[1]) {
				set_input_value(input, /*id*/ ctx[1]);
			}

			if (dirty & /*id*/ 2 && button_disabled_value !== (button_disabled_value = !/*id*/ ctx[1].length)) {
				button.disabled = button_disabled_value;
			}

			if (dirty & /*Object, errors*/ 4) {
				each_value = Object.entries(/*errors*/ ctx[2]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(form);
			if (detaching) detach(t3);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let button;
	let t;
	let modal;
	let updating_open;
	let current;
	let mounted;
	let dispose;

	function modal_open_binding(value) {
		/*modal_open_binding*/ ctx[10](value);
	}

	let modal_props = {
		loading: /*$getSettingQuery*/ ctx[3].fetching,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*open*/ ctx[0] !== void 0) {
		modal_props.open = /*open*/ ctx[0];
	}

	modal = new Modal({ props: modal_props });
	binding_callbacks.push(() => bind(modal, "open", modal_open_binding));

	return {
		c() {
			button = element("button");
			button.innerHTML = `<i class="fas fa-file-download"></i>`;
			t = space();
			create_component(modal.$$.fragment);
			attr(button, "class", "svelte-vn88ew");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			insert(target, t, anchor);
			mount_component(modal, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*toggle*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const modal_changes = {};
			if (dirty & /*$getSettingQuery*/ 8) modal_changes.loading = /*$getSettingQuery*/ ctx[3].fetching;

			if (dirty & /*$$scope, errors, id*/ 32774) {
				modal_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*open*/ 1) {
				updating_open = true;
				modal_changes.open = /*open*/ ctx[0];
				add_flush_callback(() => updating_open = false);
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (detaching) detach(t);
			destroy_component(modal, detaching);
			mounted = false;
			dispose();
		}
	};
}

function focus(element) {
	element.focus();
}

function instance($$self, $$props, $$invalidate) {
	let $getSettingQuery;
	let { isSaving = false } = $$props;
	let open = false;
	let id = "";
	let errors = {};

	const getSettingQuery = operationStore(
		`
    query($id: ID!) {
      getSetting(id: $id) {
        id
        name
        createdAt
        value
      }
    }
    `,
		{ id },
		{
			pause: true,
			requestPolicy: "cache-first"
		}
	);

	component_subscribe($$self, getSettingQuery, value => $$invalidate(3, $getSettingQuery = value));

	query(getSettingQuery).subscribe(query => {
		if (query?.data?.getSetting && !isSaving) {
			$$invalidate(2, errors = {});
			query?.data?.getSetting && updateContext(query.data.getSetting);
		} else {
			$$invalidate(2, errors.setting = "No results found.", errors);
		}
	});

	function getSetting() {
		$$invalidate(7, isSaving = false);
		set_store_value(getSettingQuery, $getSettingQuery.variables.id = id, $getSettingQuery);
		set_store_value(getSettingQuery, $getSettingQuery.context.pause = false, $getSettingQuery);
		$$invalidate(1, id = "");
	}

	function toggle() {
		$$invalidate(2, errors = {});
		$$invalidate(0, open = !open);
		$$invalidate(1, id = "");
	}

	function updateContext(query) {
		const { value, name } = query;
		const setting = JSON.parse(value);
		nameState.update(() => name);

		tenoriState.update(store => {
			setting.play = false;

			if (store.play) {
				setting.play = true;
				return setting;
			}

			return setting;
		});
	}

	function input_input_handler() {
		id = this.value;
		$$invalidate(1, id);
	}

	const keydown_handler = e => e.key === "Enter" && getSetting();

	function modal_open_binding(value) {
		open = value;
		$$invalidate(0, open);
	}

	$$self.$$set = $$props => {
		if ("isSaving" in $$props) $$invalidate(7, isSaving = $$props.isSaving);
	};

	return [
		open,
		id,
		errors,
		$getSettingQuery,
		getSettingQuery,
		getSetting,
		toggle,
		isSaving,
		input_input_handler,
		keydown_handler,
		modal_open_binding
	];
}

class GetSetting extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { isSaving: 7 });
	}
}

export default GetSetting;