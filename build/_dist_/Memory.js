import './Memory.css.proxy.js';
/* src/Memory.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import RandomButton from "./RandomButton.js";
import SaveSetting from "./SaveSetting.js";
import GetSetting from "./GetSetting.js";
import Reset from "./Reset.js";

function create_fragment(ctx) {
	let div;
	let randombutton;
	let t0;
	let getsetting;
	let updating_isSaving;
	let t1;
	let savesetting;
	let updating_isSaving_1;
	let t2;
	let reset;
	let current;
	randombutton = new RandomButton({});

	function getsetting_isSaving_binding(value) {
		/*getsetting_isSaving_binding*/ ctx[1](value);
	}

	let getsetting_props = {};

	if (/*isSaving*/ ctx[0] !== void 0) {
		getsetting_props.isSaving = /*isSaving*/ ctx[0];
	}

	getsetting = new GetSetting({ props: getsetting_props });
	binding_callbacks.push(() => bind(getsetting, "isSaving", getsetting_isSaving_binding));

	function savesetting_isSaving_binding(value) {
		/*savesetting_isSaving_binding*/ ctx[2](value);
	}

	let savesetting_props = {};

	if (/*isSaving*/ ctx[0] !== void 0) {
		savesetting_props.isSaving = /*isSaving*/ ctx[0];
	}

	savesetting = new SaveSetting({ props: savesetting_props });
	binding_callbacks.push(() => bind(savesetting, "isSaving", savesetting_isSaving_binding));
	reset = new Reset({});

	return {
		c() {
			div = element("div");
			create_component(randombutton.$$.fragment);
			t0 = space();
			create_component(getsetting.$$.fragment);
			t1 = space();
			create_component(savesetting.$$.fragment);
			t2 = space();
			create_component(reset.$$.fragment);
			attr(div, "class", "svelte-cy6x0n");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(randombutton, div, null);
			append(div, t0);
			mount_component(getsetting, div, null);
			append(div, t1);
			mount_component(savesetting, div, null);
			append(div, t2);
			mount_component(reset, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const getsetting_changes = {};

			if (!updating_isSaving && dirty & /*isSaving*/ 1) {
				updating_isSaving = true;
				getsetting_changes.isSaving = /*isSaving*/ ctx[0];
				add_flush_callback(() => updating_isSaving = false);
			}

			getsetting.$set(getsetting_changes);
			const savesetting_changes = {};

			if (!updating_isSaving_1 && dirty & /*isSaving*/ 1) {
				updating_isSaving_1 = true;
				savesetting_changes.isSaving = /*isSaving*/ ctx[0];
				add_flush_callback(() => updating_isSaving_1 = false);
			}

			savesetting.$set(savesetting_changes);
		},
		i(local) {
			if (current) return;
			transition_in(randombutton.$$.fragment, local);
			transition_in(getsetting.$$.fragment, local);
			transition_in(savesetting.$$.fragment, local);
			transition_in(reset.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(randombutton.$$.fragment, local);
			transition_out(getsetting.$$.fragment, local);
			transition_out(savesetting.$$.fragment, local);
			transition_out(reset.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(randombutton);
			destroy_component(getsetting);
			destroy_component(savesetting);
			destroy_component(reset);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isSaving = false;

	function getsetting_isSaving_binding(value) {
		isSaving = value;
		$$invalidate(0, isSaving);
	}

	function savesetting_isSaving_binding(value) {
		isSaving = value;
		$$invalidate(0, isSaving);
	}

	return [isSaving, getsetting_isSaving_binding, savesetting_isSaving_binding];
}

class Memory extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Memory;