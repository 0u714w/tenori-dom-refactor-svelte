import './Reset.css.proxy.js';
/* src/Reset.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal
} from "../web_modules/svelte/internal.js";

import {
	nameState,
	tenoriState,
	currentStep,
	timerIntervals,
	tempo
} from "./stores.js";

import createInitialState from "./InitialState.js";

function create_fragment(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.innerHTML = `<i class="fas fa-trash-alt"></i>`;
			attr(button, "class", "svelte-htj368");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*reset*/ ctx[0]);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self) {
	const reset = () => {
		tenoriState.update(() => createInitialState());
		nameState.update(() => "");
		currentStep.update(() => 1);
		tempo.update(() => 800);

		timerIntervals.update(timers => {
			timers.map(x => clearInterval(x));
			return [];
		});
	};

	return [reset];
}

class Reset extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Reset;