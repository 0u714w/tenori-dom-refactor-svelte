import './NoteRow.css.proxy.js';
/* src/NoteRow.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import SingleNote from "./SingleNote.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (17:2) {#each steps as step, i}
function create_each_block(ctx) {
	let singlenote;
	let current;

	singlenote = new SingleNote({
			props: {
				step: /*step*/ ctx[3],
				note: /*note*/ ctx[0],
				frequency: /*frequency*/ ctx[2],
				stepNumber: /*i*/ ctx[5] + 1
			}
		});

	return {
		c() {
			create_component(singlenote.$$.fragment);
		},
		m(target, anchor) {
			mount_component(singlenote, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const singlenote_changes = {};
			if (dirty & /*steps*/ 2) singlenote_changes.step = /*step*/ ctx[3];
			if (dirty & /*note*/ 1) singlenote_changes.note = /*note*/ ctx[0];
			if (dirty & /*frequency*/ 4) singlenote_changes.frequency = /*frequency*/ ctx[2];
			singlenote.$set(singlenote_changes);
		},
		i(local) {
			if (current) return;
			transition_in(singlenote.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(singlenote.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(singlenote, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let each_value = /*steps*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "svelte-1qcp8fg");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*steps, note, frequency*/ 7) {
				each_value = /*steps*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { note } = $$props;
	let { steps } = $$props;
	let { frequency } = $$props;

	$$self.$$set = $$props => {
		if ("note" in $$props) $$invalidate(0, note = $$props.note);
		if ("steps" in $$props) $$invalidate(1, steps = $$props.steps);
		if ("frequency" in $$props) $$invalidate(2, frequency = $$props.frequency);
	};

	return [note, steps, frequency];
}

class NoteRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { note: 0, steps: 1, frequency: 2 });
	}
}

export default NoteRow;