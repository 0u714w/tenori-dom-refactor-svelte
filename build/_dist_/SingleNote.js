import './SingleNote.css.proxy.js';
/* src/SingleNote.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	toggle_class
} from "../web_modules/svelte/internal.js";

import { tenoriState, currentStep } from "./stores.js";
import ToneGenerator from "./ToneGenerator.js";

function create_fragment(ctx) {
	let button;
	let i;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			i = element("i");
			attr(i, "class", "fas fa-circle svelte-9a49ql");
			toggle_class(i, "selected", /*step*/ ctx[0].status);
			toggle_class(i, "activeStep", /*$currentStep*/ ctx[3] === /*stepNumber*/ ctx[1] && /*$tenoriState*/ ctx[2].play);
			toggle_class(i, "playing", /*$currentStep*/ ctx[3] === /*stepNumber*/ ctx[1] && /*step*/ ctx[0].status && /*$tenoriState*/ ctx[2].play);
			attr(button, "class", "svelte-9a49ql");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i);

			if (!mounted) {
				dispose = listen(button, "click", /*updateStatus*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*step*/ 1) {
				toggle_class(i, "selected", /*step*/ ctx[0].status);
			}

			if (dirty & /*$currentStep, stepNumber, $tenoriState*/ 14) {
				toggle_class(i, "activeStep", /*$currentStep*/ ctx[3] === /*stepNumber*/ ctx[1] && /*$tenoriState*/ ctx[2].play);
			}

			if (dirty & /*$currentStep, stepNumber, step, $tenoriState*/ 15) {
				toggle_class(i, "playing", /*$currentStep*/ ctx[3] === /*stepNumber*/ ctx[1] && /*step*/ ctx[0].status && /*$tenoriState*/ ctx[2].play);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $tenoriState;
	let $currentStep;
	component_subscribe($$self, tenoriState, $$value => $$invalidate(2, $tenoriState = $$value));
	component_subscribe($$self, currentStep, $$value => $$invalidate(3, $currentStep = $$value));
	let { note } = $$props;
	let { frequency } = $$props;
	let { step } = $$props;
	let { stepNumber } = $$props;

	const updateStatus = () => {
		return tenoriState.update(store => {
			const updateStore = { ...store };
			updateStore.notes.filter(x => x.note === note).map(y => y.steps[stepNumber - 1].status = !y.steps[stepNumber - 1].status);
			return updateStore;
		});
	};

	currentStep.subscribe(step => {
		if ($tenoriState.play) {
			if (stepNumber === step) {
				const [noteToPlay] = $tenoriState.notes.filter(x => x.note === note).map(x => x.steps[stepNumber - 1].status);

				if (noteToPlay) {
					const options = { note, frequency, ...$tenoriState };
					ToneGenerator(options);
				}
			}
		}
	});

	$$self.$$set = $$props => {
		if ("note" in $$props) $$invalidate(5, note = $$props.note);
		if ("frequency" in $$props) $$invalidate(6, frequency = $$props.frequency);
		if ("step" in $$props) $$invalidate(0, step = $$props.step);
		if ("stepNumber" in $$props) $$invalidate(1, stepNumber = $$props.stepNumber);
	};

	return [step, stepNumber, $tenoriState, $currentStep, updateStatus, note, frequency];
}

class SingleNote extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			note: 5,
			frequency: 6,
			step: 0,
			stepNumber: 1
		});
	}
}

export default SingleNote;