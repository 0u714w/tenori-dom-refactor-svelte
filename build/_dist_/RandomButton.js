import './RandomButton.css.proxy.js';
/* src/RandomButton.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal
} from "../web_modules/svelte/internal.js";

import { operationStore, query } from "../web_modules/@urql/svelte.js";
import { nameState, tenoriState } from "./stores.js";

function create_fragment(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.innerHTML = `<i class="fas fa-random"></i>`;
			attr(button, "class", "svelte-htj368");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*getRandomSetting*/ ctx[0]);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self) {
	const randomSetting = operationStore(`
    query {
      getRandomSetting {
        id
        name
        value
        createdAt
      }
    }
    `);

	query(randomSetting);

	const getRandomSetting = async () => {
		randomSetting.context = { requestPolicy: "cache-first" };
		randomSetting.context = { requestPolicy: "network-only" };

		if (randomSetting.data) {
			const { getRandomSetting: { value, name } } = await randomSetting.data;
			const setting = JSON.parse(value);
			nameState.update(() => name);

			tenoriState.update(store => {
				setting.play = false;

				if (store.play) {
					setting.play = true;
					return setting;
				}

				return setting;
			});
		}
	};

	return [getRandomSetting];
}

class RandomButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default RandomButton;